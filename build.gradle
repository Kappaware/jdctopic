/*
 * Copyright (C) 2016 BROADSoftware
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


plugins {
  id 'nebula.ospackage' version '4.10.0'
}

defaultTasks 'rpm'
 
group = 'com.kappaware.jdctopic'

apply plugin: 'scala'
apply plugin: 'eclipse'


repositories {
    jcenter()
}


configurations {
	compileAndJar
	compile.extendsFrom(compileAndJar)
}

dependencies {
	compile "org.log4s:log4s_${scalaVersion.substring(0,4)}:$log4sVersion"
 	compile "org.slf4j:slf4j-log4j12:$sl4jLog4jVersion"
    compile "org.slf4j:slf4j-api:$sl4jApiVersion"
    compile "log4j:log4j:$log4jVersion"
    compileAndJar "net.sf.jopt-simple:jopt-simple:$joptVersion"
    //compile "com.fasterxml.jackson.jr:jackson-jr-objects:$jacksonJrVersion"
 	compile "org.scala-lang:scala-library:$scalaVersion" // To force $scalaVersion, otherwise, an oldest one will be pulled by kafka or other lib 
 	compile "org.apache.kafka:kafka_${scalaVersion.substring(0,4)}:$kafkaVersion"
 	compileAndJar "com.esotericsoftware.yamlbeans:yamlbeans:$yamlbeansVersion"
    testCompile "junit:junit:$junitVersion"
}


jar {
	exclude("log4j.xml")
	rename("log4j-jar.xml", "log4j.xml")
}

// Refer to https://issues.gradle.org/browse/GRADLE-1010
eclipseJdt.doLast( {
	File f = file('.settings/org.eclipse.core.resources.prefs')
   	f.write('eclipse.preferences.version=1\n')
   	f.append('encoding/<project>=UTF-8')
})

//create a single Jar with all dependencies
task fatJar(type: Jar) {
   classifier 'far'
	manifest {
        attributes 'Implementation-Title': 'jdctopic', 
        	'Implementation-Version': version,
        	'Main-Class': 'com.kappaware.jdctopic.Main'
    }
    baseName = project.name
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}


//create a single Jar with non system dependencies
task uberJar(type: Jar) {
   classifier 'uber'
	manifest {
        attributes 'Implementation-Title': 'jdctopic', 
        	'Implementation-Version': version,
        	'Main-Class': 'com.kappaware.jdctopic.Main'
    }
    baseName = project.name
    from { configurations.compileAndJar.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}



// To launch as: ./run.sh main arg1 arg2 ..
task run_main(type: JavaExec) {
	dependsOn classes
	description = "Main Command launcher"
	main = "com.kappaware.jdctopic.Main"
	standardInput = System.in
	classpath sourceSets.main.runtimeClasspath
	if ( project.hasProperty("runArgs") ) {
		args Eval.me(runArgs)	
	}
}


task rpm(type: Rpm) {
	summary 'Kafka topic creation tool'
	packageName 'jdctopic'
	version versionForRpm
	arch NOARCH
	vendor 'BROADSoftware'
	license 'Apache 2.0'
	os LINUX
	release '1'
	packageDescription 'jdctopic is an Kafka admin tool allowing idempotency on topics definition.'
    
   	from(uberJar.outputs.files) {
	    into '/opt/jdctopic'
	    user 'root'
		group 'root'
		//rename "${fatJarBaseName}(.+).jar", "${fatJarBaseName}.jar"
	    fileMode 0644
    }
    
   	from('scripts/packages/jdctopic') { into '/usr/bin'; user 'root'; group 'root'; fileMode 0755  }
   	from('scripts/packages/log4j.xml') { into '/etc/jdctopic'; user 'root'; group 'root'; fileMode 0644  }
   	from('scripts/packages/setenv.sh') { into '/etc/jdctopic'; user 'root'; group 'root'; fileMode 0644    }
    
}

